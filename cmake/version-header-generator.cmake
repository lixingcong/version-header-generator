# CMAKE_CURRENT_SOURCE_DIR is the source code dir
# Alternatively, you can use CMAKE_CURRENT_LIST_DIR, the path of CMakeLists.txt

# Set the output file
set(VERSION_FILE ${CMAKE_CURRENT_SOURCE_DIR}/version.h)

# Set default values
set(UNKNOWN_VALUE unknown)
set(GIT_VERSION_DESCRIBE ${UNKNOWN_VALUE})
set(GIT_COMMIT_SHA ${UNKNOWN_VALUE})
set(GIT_COMMIT_TIME ${UNKNOWN_VALUE})
set(GIT_BRANCH ${UNKNOWN_VALUE})
if ("${CMAKE_PROJECT_VERSION}" STREQUAL "")
    set(APP_VERSION ${UNKNOWN_VALUE})
else()
    set(APP_VERSION ${CMAKE_PROJECT_VERSION})
endif()

# Compilation timestamp
string(TIMESTAMP CMAKE_EXECUTE_TIME "%Y-%m-%d %H:%M")

find_package(Git)
if(Git_FOUND)
  message("Use git: ${GIT_EXECUTABLE}")

  # Cmd of git
  macro(RunGitCommand)
      execute_process(COMMAND
	  "${GIT_EXECUTABLE}" ${ARGV}
	  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
	  OUTPUT_VARIABLE git_output
	  OUTPUT_STRIP_TRAILING_WHITESPACE)
  endmacro()

  # Git version describe
  # 1. if the repo is clean and has tagged, output "v1.0"
  # 2. if the repo is clean and has 6 commits ahead of v1.0, output "v1.0-6-g0c2b1cf"
  # 3. if the repo is dirty, "-dev" will be appened to the output
  # 4. if no tags in repo, output the short commit SHA "g0c2b1cf"
  RunGitCommand(describe --tags --always --dirty=-dev)
  if(git_output)
      set(GIT_VERSION_DESCRIBE ${git_output})
  endif()

  # Git commit full SHA
  RunGitCommand(rev-parse HEAD)
  if(git_output)
      set(GIT_COMMIT_SHA ${git_output})
  endif()

  # Git branch
  RunGitCommand(rev-parse --abbrev-ref HEAD)
  if(git_output)
      set(GIT_BRANCH ${git_output})
  endif()

  # Git commit author date
  RunGitCommand(show --no-patch --no-notes --pretty='%ad' --date=format:'%Y-%m-%d\ %H:%M')
  if(git_output)
      set(GIT_COMMIT_TIME ${git_output})
      string(REPLACE "'" "" GIT_COMMIT_TIME ${GIT_COMMIT_TIME})
  endif()
endif()

# Generate the header
set(VERSION_CONTENT
    "// This file is generated by CMake\n"
    "#pragma once\n\n"
    "#define APP_VERSION \"${APP_VERSION}\"\n\n"
    "#define GIT_VERSION_DESCRIBE \"${GIT_VERSION_DESCRIBE}\"\n"
    "#define GIT_COMMIT_SHA \"${GIT_COMMIT_SHA}\"\n"
    "#define GIT_COMMIT_TIME \"${GIT_COMMIT_TIME}\"\n"
    "#define GIT_BRANCH \"${GIT_BRANCH}\"\n\n"
    "#define CMAKE_EXECUTE_TIME \"${CMAKE_EXECUTE_TIME}\"\n"
)

if(EXISTS ${VERSION_FILE})
    file(READ ${VERSION_FILE} VERSION_CONTENT_OLD)
else()
    set(VERSION_CONTENT_OLD "")
endif()

if (NOT "${VERSION_CONTENT}" STREQUAL "${VERSION_CONTENT_OLD}")
    file(WRITE ${VERSION_FILE} ${VERSION_CONTENT})
endif()

configure_file(
  ${CMAKE_CURRENT_LIST_DIR}/Changelog.txt.in
  ${CMAKE_CURRENT_SOURCE_DIR}/Changelog.txt
)
