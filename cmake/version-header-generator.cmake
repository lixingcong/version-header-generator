# Tips for the dir:
#    CMAKE_CURRENT_SOURCE_DIR is the source code dir
#    Alternatively, you can use CMAKE_CURRENT_LIST_DIR

find_package(Git)
if(Git_FOUND)
  message("Git found: ${GIT_EXECUTABLE}")
endif()

# Git commit SHA
execute_process(
  COMMAND git rev-parse HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT_SHA
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Git branch
execute_process(
  COMMAND git rev-parse --abbrev-ref HEAD
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_BRANCH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

# Compilation timestamp
string(TIMESTAMP CMAKE_EXECUTE_TIME "%Y-%m-%d %H:%M")

# Git commit timestamp
execute_process(
  # pretty='%ad'输出author的提交时间
  COMMAND git show --no-patch --no-notes --pretty='%ad' --date=format:'%Y-%m-%d\ %H:%M'
  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
  OUTPUT_VARIABLE GIT_COMMIT_TIME
  OUTPUT_STRIP_TRAILING_WHITESPACE
)
string(REPLACE "'" "" GIT_COMMIT_TIME ${GIT_COMMIT_TIME})

set(VERSION_FILE version.h)
set(VERSION_CONTENT
    "// This file is generated by CMake\n"
    "#pragma once\n"
    "#define APP_VERSION \"${CMAKE_PROJECT_VERSION}\"\n"
    "#define GIT_COMMIT_SHA \"${GIT_COMMIT_SHA}\"\n"
    "#define GIT_BRANCH \"${GIT_BRANCH}\"\n"
    "#define GIT_COMMIT_TIME \"${GIT_COMMIT_TIME}\"\n"
    "#define CMAKE_EXECUTE_TIME \"${CMAKE_EXECUTE_TIME}\"\n"
)

if(EXISTS ${VERSION_FILE})
    file(READ ${VERSION_FILE} VERSION_CONTENT_OLD)
else()
    set(VERSION_CONTENT_OLD "")
endif()

if (NOT "${VERSION_CONTENT}" STREQUAL "${VERSION_CONTENT_OLD}")
    file(WRITE ${VERSION_FILE} ${VERSION_CONTENT})
endif()

configure_file(
  ${CMAKE_CURRENT_LIST_DIR}/Changelog.txt.in
  ${CMAKE_CURRENT_SOURCE_DIR}/Changelog.txt
)
